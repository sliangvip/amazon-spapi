<?php
/**
* This class is autogenerated by the Spapi class generator
* Date of generation: 2022-01-09
* Specification: https://github.com/amzn/selling-partner-api-models/blob/main/models/vendor-direct-fulfillment-shipping-api-model/vendorDirectFulfillmentShippingV1.json
* Source MD5 signature: 3ed69d5a7023593cc5a33e040c2f1086
*
*
* Selling Partner API for Direct Fulfillment Shipping
* The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
*/
namespace DoubleBreak\Spapi\Api;
use DoubleBreak\Spapi\Client;

class VendorDirectFulfillmentShipping extends Client {

  protected $apiVersion = 'v1';

  protected $versions = [
    'v1' => 'v1',
  ];

  /**
  * Operation getShippingLabels
  *
  * @param array $queryParams
  *    - *shipFromPartyId* string - The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
  *    - *limit* integer - The limit to the number of records returned.
  *    - *createdAfter* string - Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *createdBefore* string - Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *sortOrder* string - Sort ASC or DESC by order creation date.
  *    - *nextToken* string - Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
  *
  */
  public function getShippingLabels($queryParams = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getShippingLabelsAsync($queryParams = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation submitShippingLabelRequest
  *
  */
  public function submitShippingLabelRequest($body = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  public function submitShippingLabelRequestAsync($body = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation getShippingLabel
  *
  * @param string $purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
  *
  */
  public function getShippingLabel($purchaseOrderNumber)
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }

  public function getShippingLabelAsync($purchaseOrderNumber)
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/shippingLabels/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation submitShipmentConfirmations
  *
  */
  public function submitShipmentConfirmations($body = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/shipmentConfirmations", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  public function submitShipmentConfirmationsAsync($body = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/shipmentConfirmations", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation submitShipmentStatusUpdates
  *
  */
  public function submitShipmentStatusUpdates($body = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/shipmentStatusUpdates", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  public function submitShipmentStatusUpdatesAsync($body = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/shipmentStatusUpdates", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation getCustomerInvoices
  *
  * @param array $queryParams
  *    - *shipFromPartyId* string - The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
  *    - *limit* integer - The limit to the number of records returned
  *    - *createdAfter* string - Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *createdBefore* string - Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *sortOrder* string - Sort ASC or DESC by order creation date.
  *    - *nextToken* string - Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
  *
  */
  public function getCustomerInvoices($queryParams = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/customerInvoices", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getCustomerInvoicesAsync($queryParams = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/customerInvoices", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getCustomerInvoice
  *
  * @param string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice.
  *
  */
  public function getCustomerInvoice($purchaseOrderNumber)
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/customerInvoices/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }

  public function getCustomerInvoiceAsync($purchaseOrderNumber)
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/customerInvoices/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation getPackingSlips
  *
  * @param array $queryParams
  *    - *shipFromPartyId* string - The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses.
  *    - *limit* integer - The limit to the number of records returned
  *    - *createdAfter* string - Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *createdBefore* string - Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
  *    - *sortOrder* string - Sort ASC or DESC by packing slip creation date.
  *    - *nextToken* string - Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call.
  *
  */
  public function getPackingSlips($queryParams = [])
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/packingSlips", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getPackingSlipsAsync($queryParams = [])
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/packingSlips", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getPackingSlip
  *
  * @param string $purchaseOrderNumber The purchaseOrderNumber for the packing slip you want.
  *
  */
  public function getPackingSlip($purchaseOrderNumber)
  {
    return $this->send("/vendor/directFulfillment/shipping/{$this->apiVersion}/packingSlips/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }

  public function getPackingSlipAsync($purchaseOrderNumber)
  {
    return $this->sendAsync("/vendor/directFulfillment/shipping/{$this->apiVersion}/packingSlips/{$purchaseOrderNumber}", [
      'method' => 'GET',
    ]);
  }
}
